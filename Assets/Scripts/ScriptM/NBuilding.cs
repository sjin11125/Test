using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.UI;

public class NBuilding : Building
{
    public void RefreshBuildingList()               //빌딩 리스트 새로고침
    {
        for (int i = 0; i < GameManager.BuildingList.Count; i++)
        {
            if (GameManager.BuildingList[i].Id.Equals(Id))
            {
                GameManager.BuildingList[i] = this.DeepCopy();
            }
        }
        GridBuildingSystem.isSave = true;

    }
    public void Rotation()          //건물 회전
    {
        bool isflip_bool;

        if (isFliped.Equals("F"))
            isflip_bool = false;
        else
            isflip_bool = true;


        for (int i = 0; i < buildings.Length; i++)
        {
            if (buildings[i] != null)
            {
                SpriteRenderer[] spriterenderer = buildings[i].GetComponentsInChildren<SpriteRenderer>();
                Transform[] transform = buildings[i].GetComponentsInChildren<Transform>();


                for (int j = 0; j < spriterenderer.Length; j++)
                {
                    spriterenderer[j].flipX = isflip_bool;
                }
                for (int k = 0; k < transform.Length; k++)
                {
                    transform[k].localPosition = new Vector3(-transform[k].localPosition.x, transform[k].localPosition.y, 0);
                }

                if (isFliped.Equals("T"))
                    isFliped = "F";
                else
                    isFliped = "T";
            }
        }
        RefreshBuildingList();          //건물 리스트 새로고침
    }

    void Awake()
    {
        Parent = GameObject.Find("buildings");
    }
    void Start()
    {
        bool isflip_bool;

        if (isFliped.Equals("F"))
            isflip_bool = false;
        else
            isflip_bool = true;

        buildings = new GameObject[2];
        currentTime = (int)startingTime;
        save = GetComponent<BuildingSave>();
        //TimeText = GameObject.Find("Canvas/TimeText"); //게임오브젝트 = 캔버스에 있는 TimeText로 설정
        if (Type.Equals(BuildType.Make))
        {
            Building_Image = gameObject.name;       //이름 설정
        }

        //Placed = false;

        // child = GetComponentsInChildren<Transform>();

        // Debug.Log(child[6].name);
        //Coin_Button= child[6];
        //Button_Pannel = child[2];

        Coin_Button.gameObject.SetActive(false);

        //Text countdownText = GetComponent<Text>();

        //layer_y = 10;
        //child[1].GetComponent<SpriteRenderer>().sortingOrder = layer_y;


        //-------------레벨 별 건물--------------------
        GameObject Level1building, Level2building, Level3building;
        if (Level <= 3)
        {
            //GameObject UPPannel = Instantiate(UpgradePannel);
            Level1building = gameObject.transform.Find("building").gameObject;
            if (gameObject.transform.Find("building2").gameObject != null)
            {

            }
            Level2building = gameObject.transform.Find("building2").gameObject;
            //Level3building = gameObject.transform.Find("building3").gameObject;
            buildings[0] = Level1building;
            buildings[1] = Level2building;
            // buildings[2] = Level3building;
        }

        switch (Level)
        {
            case 1:
                buildings[0].SetActive(true);

                child = GetComponentsInChildren<Transform>();

                buildings[0].GetComponent<SortingGroup>().sortingOrder = -(int)transform.position.y;

                break;
            case 2:
                buildings[0].SetActive(true);
                //buildings[1].SetActive(true);
                //buildings[2].SetActive(false);
                buildings[0].GetComponent<SpriteRenderer>().sprite = buildings_image[Level - 2];
                buildings[0].GetComponent<SortingGroup>().sortingOrder = -(int)transform.position.y;

                buildings[1].GetComponentInChildren<SortingGroup>().sortingOrder = (-buildings[0].GetComponent<SortingGroup>().sortingOrder) + 1;
                Debug.Log(" buildings[0]:  " + buildings[0].transform.parent.gameObject.name);
                Debug.Log(" buildings[0] layer:  " + buildings[0].GetComponent<SortingGroup>().sortingOrder);

                break;
            case 3:
                buildings[0].SetActive(false);
                buildings[1].SetActive(true);
                // buildings[2].SetActive(true);
                //buildings[2].GetComponent<SpriteRenderer>().sortingOrder = layer_y;
                break;
            default:
                break;
        }
        if (isflip_bool.Equals(true))
        {
            Rotation();
        }
    }

    void Update()
    {
        // layer_y = 1;             //레이어 설정



        // text.text = currentTime.ToString("0.0");
        //TimeText.transform.position = Camera.main.WorldToScreenPoint(transform.position + new Vector3(0.30f, 1.4f, 0)); //Timer위치

        //이제 추가해야할 것은 건물을 눌렀을때 시간이 뜨도록 하기 (이거는 나중에)
        //건물이 생성되면 시간도 생성되어야 함 (이것도 나중에)


        // 시간이 흐르는 것이 계속 저장되도록 하기


        // 아이콘을 누르면 재화 + 
        // current Time이 일정시간 밑으로 떨어졌을 때 수확 아이콘 생성


        if (Placed.Equals(true))       // 건물 배치가 확정
        {
            Button_Pannel.gameObject.SetActive(false);     // 배치하는 버튼 사라지게
            Rotation_Pannel.gameObject.SetActive(false);        //회전 버튼 사라지게
            UpgradePannel.gameObject.SetActive(false);
            Remove_Pannel.gameObject.SetActive(false);
            /*if (Building_Image != "bunsu_level(Clone)")
            {
               ( if (isCoin .Equals( false)      //코인 아직 안먹었으면
                {
                    Coin();     //재화 생성되게
                }*
            }*/
        }
        else                            //확정 아닐 때
        {

            Button_Pannel.gameObject.SetActive(true);               //확정 패널 뜨게
            Rotation_Pannel.gameObject.SetActive(true);               //회전 패널 뜨게
            if (Building_Image != "bunsu_level(Clone)")
            {

                if (Type != BuildType.Make)
                {
                    UpgradePannel.gameObject.SetActive(true);

                }
            }
            if (Building_Image != "village_level(Clone)")
            {
                Remove_Pannel.gameObject.SetActive(true);
            }
        }




    }
    public void Coin() //재화부분
    {

        //float currentTime_1 = currentTime;
        //currentTime_1 -= 1 * Time.deltaTime;
        currentTime -= 1 * Time.deltaTime;
        //currentTime = (int)currentTime_1;

        if ((int)currentTime <= 0)
        {
            currentTime = 0;
        }

        if (((int)currentTime % 5).Equals(0) && (int)currentTime != startingTime && isCountCoin.Equals(false))     //생성되고 5초 마다 재화생성 (건물마다 다르다!)
        {
            isCountCoin = true;
            //CountCoin += 1;

            Coin_Button.gameObject.SetActive(true);
        }
        else if ((int)currentTime % 5 != 0)
        {
            isCountCoin = false;
        }

        // 재화를 누르면 current Time 초기화 or 0이 되면 이미지 MAX coin으로 변환 후 수확하면 currentTime = startingTime




    }

    public void Coin_OK()       //재화 버튼 누르는 함수
    {
        //currentTime =  startingTime;
        isCoin = true;      //코인 먹었음
        GameManager.Money += Reward[Level - 1];
        CanvasManger.AchieveMoney += Reward[Level - 1];

        currentTime = (int)startingTime;

        isCoin = true;

        if (currentTime.Equals(0))
        {
            //수정필요
            currentTime = (int)startingTime;
            //Max 이미지로 바뀜
        }
        Coin_Button.gameObject.SetActive(false);
    }







    #region Build Methods
    public bool CanBePlaced()           //건물이 놓여질 수 있는지 체크
    {
        Vector3Int positionInt = GridBuildingSystem.current.gridLayout.LocalToCell(transform.position);     //현재위치
        BoundsInt areaTemp = area;
        areaTemp.position = positionInt;


        if (GridBuildingSystem.current.CanTakeArea(areaTemp))
        {
            return true;
        }
        return false;
    }
    public void Sell_Pannel()
    {

        RemovePannel.gameObject.SetActive(true);
        RemovePannel.transform.parent = GameObject.Find("O").transform;
        RemovePannel.GetComponent<RectTransform>().localPosition = new Vector3(1, 1, 0);
        RemovePannel.GetComponent<ChaButtonScript>().DowngradeBuilding = this;

    }
    public void Remove(Building building)
    {

        Vector3Int positionInt = GridBuildingSystem.current.gridLayout.LocalToCell(transform.position);
        BoundsInt areaTemp = area;
        areaTemp.position = positionInt;
        GridBuildingSystem.current.RemoveArea(areaTemp);





        if (Type.Equals(BuildType.Make))     //상점에서 사고 설치X 바로 제거
        {
            GameManager.Money += building.Cost[building.Level - 1];          //자원 되돌리기
            CanvasManger.AchieveMoney += building.Cost[building.Level - 1];
            GameManager.ShinMoney += building.ShinCost[building.Level - 1];
            CanvasManger.AchieveShinMoney += building.ShinCost[building.Level - 1];
            Destroy(gameObject);
        }
        else                                //설치하고 제거
        {
            GameManager.Money += building.Cost[building.Level - 1] / 10;          //자원 되돌리기
            CanvasManger.AchieveMoney += building.Cost[building.Level - 1] / 10;
            GameManager.ShinMoney += building.ShinCost[building.Level - 1] / 3;
            CanvasManger.AchieveShinMoney += building.ShinCost[building.Level - 1] / 3;

            BuildingListRemove();
            save.BuildingReq(BuildingDef.removeValue, this);
            Destroy(gameObject);
        }
        GameManager.isUpdate = true;

    }
    public void Place_Initial(BuildType buildtype)
    {
        Vector3 vec = new Vector3(float.Parse(BuildingPosiiton_x), float.Parse(BuildingPosiiton_y), 0);
        area.position = GridBuildingSystem.current.gridLayout.WorldToCell(vec);
        BoundsInt areaTemp = area;
        //areaTemp.position = positionInt;
        Placed = true;      // 배치 했니? 네
        GridBuildingSystem.current.TakeArea(areaTemp);      //타일 맵 설정
        transform.position = vec;
        //Debug.Log("index: "+ (-((int)transform.position.y - (int)transform.position.x)));
        /* buildings[0].GetComponent<SortingGroup>().sortingOrder = -((int)transform.position.y- (int)transform.position.x);
         if (Level .Equals( 2)
         {
             buildings[1].GetComponentInChildren<SortingGroup>().sortingOrder = -((int)transform.position.y-(int)transform.position.x);
         }*/
    }
    public void Place(BuildType buildtype)         //건물 배치
    {

        Vector3 vec = transform.position;
        Vector3Int positionInt = GridBuildingSystem.current.gridLayout.LocalToCell(vec);
        BoundsInt areaTemp = area;
        //areaTemp.position = positionInt;
        //Debug.Log(areaTemp.position);
        Placed = true;      // 배치 했니? 네
        Debug.Log(buildings.Length);
        buildings[0].GetComponent<SortingGroup>().sortingOrder = -(int)transform.position.y;
        /*if (Level.Equals(2)
        {
            buildings[1].GetComponentInChildren<SortingGroup>().sortingOrder = -(int)transform.position.y;
        }*/
        GridBuildingSystem.current.TakeArea(areaTemp);      //타일 맵 설정

        //currentTime = startingTime;
        //원래 업데이트 부분
        BuildingPosition = transform.position;          //위치 저장
        layer_y = (int)-transform.position.y;      //레이어 설정
        isLock = "T";           //배치했다

        /* for (int i = 0; i < buildings.Length; i++)
         {
             if (buildings[i] != null)
             {
                 buildings[i].GetComponent<SpriteRenderer>().sortingOrder = layer_y;
             }
         }*/

        if (buildtype.Equals(BuildType.Make))                     //새로 만드는 건가?
        {

            Building_name = gameObject.name;
            Debug.Log("BuildingPosiiton_x: " + BuildingPosiiton_x);
            GameManager.BuildingNumber[Building_Image]++; //해당 건물의 갯수 추가
            Id = GameManager.IDGenerator();
            gameObject.name = Id;      //이름 재설정
            BuildingListAdd();      //현재 가지고 있는 건물 리스트에 추가
            buildtype = BuildType.Empty;
            Debug.Log("새로만듬");

        }
        else if (buildtype.Equals(BuildType.Load))                  //로드할때
        {
            buildtype = BuildType.Empty;
        }
        else if (buildtype.Equals(BuildType.Move))            //이동할 때
        {
            Debug.Log("Move");
            gameObject.name = GameManager.CurrentBuilding_Script.Id;
            Id = GameManager.CurrentBuilding_Script.Id;
            Building_name = GameManager.CurrentBuilding_Script.Building_name;
            isLock = "T";
            RefreshBuildingList();

            buildtype = BuildType.Empty;

            // save.UpdateValue(this);
            save.BuildingReq(BuildingDef.updateValue, this);
        }
        else
        {
            // save.UpdateValue(this);
            save.BuildingReq(BuildingDef.updateValue, this);
        }

        gameObject.transform.parent = Parent.transform;
        GridBuildingSystem.current.temp_gameObject = null;
    }
    public void BuildingListRemove()
    {
        for (int i = GameManager.BuildingList.Count - 1; i >= 0; i--)
        {
            if (GameManager.BuildingList[i].Building_name.Equals(Building_name))
            {
                Debug.Log("Remove: " + GameManager.BuildingList[i].Building_name);
                GameManager.BuildingList.RemoveAt(i);
                for (int p = 0; p < GameManager.BuildingList.Count; p++)
                {
                    Debug.Log("Current: " + GameManager.BuildingList[p].Building_name);
                }
                return;
            }

        }

        GridBuildingSystem.isSave = true;

    }
    public void BuildingListAdd()
    {
        GameManager.BuildingList.Add(this.DeepCopy());      //현재 가지고 있는 빌딩 리스트에 추가

        //GameManager.BuildingArray = GameManager.BuildingList.ToArray();
        Debug.Log("GameManager.BuildingArray: " + GameManager.BuildingArray.Length);

        GameManager.CurrentBuilding = null;
        //

        save.BuildingReq(BuildingDef.addValue, this);
        //GameManager.isUpdate = true;
    }
    #endregion
    // Update is called once per frame


    public bool Upgrade()
    { //GameObject Level1building, Level2building, Level3building;
        Debug.Log("내 빌딩 이미지: " + Building_Image);
        if (Level < 2)
        {
            if (Building_Image == "building_level(Clone)" ||
                   Building_Image == "village_level(Clone)" ||
                   Building_Image == "flower_level(Clone)")
            {
                Debug.Log("해당 건물마자");
                for (int i = 0; i < GameManager.CharacterList.Count; i++)
                {
                    if (GameManager.CharacterList[i].cardName == "수리공누니")
                    {
                        Debug.Log("해당 누니이써");
                        isUp = true;

                    }
                }
            }
            //GameObject UPPannel = Instantiate(UpgradePannel);
            if (Building_Image == "syrup_level(Clone)" ||
             Building_Image == "fashion_level(Clone)" ||
             Building_Image == "school_level(Clone)")
            {
                Debug.Log("해당 건물마자22");
                for (int i = 0; i < GameManager.CharacterList.Count; i++)
                {
                    if (GameManager.CharacterList[i].cardName == "페인트누니")
                    {
                        Debug.Log("해당 누니이써222");
                        isUp = true;

                    }
                }
            }
            if (isUp == true)
            {


                UpgradePannel2.GetComponent<ChaButtonScript>().Upgrade(buildings, Level, this);
                UpgradePannel2.gameObject.SetActive(true);


                Text[] upgradeText = UpgradePannel2.GetComponentsInChildren<Text>();
                Debug.Log("업그레이드 아이디: " + Id);




                for (int i = 0; i < GameManager.BuildingList.Count; i++)
                {
                    for (int j = 0; j < GameManager.BuildingArray.Length; j++)
                    {
                        if (Building_Image == GameManager.BuildingArray[j].Building_Image)
                        {

                            upgradeText[3].text = GameManager.BuildingArray[j].Reward[Level - 1].ToString();     //업글 전 획득 재화
                            Debug.Log("업글전: " + GameManager.BuildingArray[j].Reward[Level - 1]);
                            upgradeText[4].text = GameManager.BuildingArray[j].Reward[Level].ToString();                       //업글 후 획득 재화
                            Debug.Log("업글전: " + GameManager.BuildingArray[j].Reward[Level - 1]);
                            upgradeText[6].text = "얼음: " + GameManager.BuildingArray[j].Cost[Level].ToString() + ",   빛나는 얼음: " + GameManager.BuildingArray[j].ShinCost[Level].ToString() + " 이 소모됩니다.";
                            return true;

                        }
                    }
                }
                return true;
            }
            else
            {
                return false;
            }

        }
        return isUp;
    }




}
